20250121 09:12:16 -文本内容:  WNDCLASS wc = new WNDCLASS
        {
            lpfnWndProc = Marshal.GetFunctionPointerForDelegate(wndProcDelegate), // 将委托转换为函数指针
            hInstance = NativeMethod.GetModuleHandle(default),
            lpszClassN
20250121 09:40:48 -文本内容: 高越萍
20250121 09:40:49 -文本内容: 高越萍
20250121 09:40:49 -文本内容: 高越萍
20250121 09:40:49 -文本内容: 高越萍
20250121 09:48:37 -文本内容: [MethodImpl(MethodImplOptions.AggressiveInlining)]
20250121 09:48:37 -文本内容: [MethodImpl(MethodImplOptions.AggressiveInlining)]
20250121 09:49:02 -文本内容: MethodCodeType
20250121 09:49:02 -文本内容: MethodCodeType
20250121 09:55:31 -文本内容: WndProcDelegate
20250121 09:55:32 -文本内容: WndProcDelegate
20250121 09:55:32 -文本内容: WndProcDelegate
20250121 09:55:40 -文本内容: WndProc
20250121 09:55:40 -文本内容: WndProc
20250121 11:57:10 -文本内容: ClipboardData
20250121 11:57:18 -文本内容: IClipboardData
20250121 11:57:34 -文本内容: void
20250121 11:57:40 -文本内容: Accept(IClipboardDataVisitor visitor)
20250121 11:57:54 -文本内容: ClipboardFormat
20250121 13:38:01 -文本内容: IEnumerable
20250121 13:38:01 -文本内容: IEnumerable
20250121 13:42:38 -文本内容:  switch (format)
                {

                    case 1: // CF_TEXT
                    case 13: // CF_UNICODETEXT
                        return new ClipboardTextData(GetClipboardText(format), (ClipboardFormat)format);

                    case 15: // CF_HDROP
                        return new ClipboardFilesData(GetClipboardFiles(), ClipboardFormat.CF_HDROP);

                    default:
                        Console.WriteLine("未知的剪切板格式: " + format);
                        break;
                }
20250121 13:43:29 -文本内容: ClipboardFormat
20250121 13:44:02 -文本内容: hWndNewOwner
20250121 13:44:02 -文本内容: hWndNewOwner
20250121 13:49:10 -文本内容: /// <inheritdoc cref="BorderlessWindowAsync"/>
public ICommand BorderlessWindow_Click { get; }
20250121 13:49:13 -文本内容:    /// <inheritdoc cref="BorderlessWindowAsync"/>
   public ICommand BorderlessWindow_Click { get; }
20250121 13:49:15 -文本内容: 
        if (SelectWindow == null)
            return;

        var apiRsp = await NativeWindowHelper.BorderlessWindowAsync(SelectWindow.ProcessId, SelectWindow.Handle);
        apiRsp.HandleUI();
    }

    /// <inheritdoc cref="MaximizeWindowAsync"/>
20250121 13:49:19 -文本内容: namespace Mobius.UI.ViewModels;

partial class BorderlessGamePageViewModel
{
    /// <inheritdoc cref="CrossMouseDownAsync"/>
    public ICommand Cross_MouseDown { get; }

    /// <summary>
    /// 十字架鼠标按下
    /// </summary>
    /// <returns></returns>
    async Task CrossMouseDownAsync()
    {
        await foreach (var apiRsp in GetMoveMouseDownWindowAsync())
        {
            if (apiRsp.HandleUIAllowNull(out var window) && window != null)
            {
                foreach (var item in WindowList.ToArray())
                {
                    if (item.Equals(window))
                    {
                        WindowList.Remove(item);
                    }
                }
                SelectWindow = window;
                WindowList.Insert(0, window);
            }
        }
    }

    /// <inheritdoc cref="BorderlessWindowAsync"/>
    public ICommand BorderlessWindow_Click { get; }

    /// <summary>
    /// 无边框窗口化
    /// </summary>
    /// <returns></returns>
    async Task BorderlessWindowAsync()
    {
        if (SelectWindow == null)
            return;

        var apiRsp = await NativeWindowHelper.BorderlessWindowAsync(SelectWindow.ProcessId, SelectWindow.Handle);
        apiRsp.HandleUI();
    }

    /// <inheritdoc cref="MaximizeWindowAsync"/>
    public ICommand MaximizeWindow_Click { get; }

    /// <summary>
    /// 最大化窗口
    /// </summary>
    /// <returns></returns>
    async Task MaximizeWindowAsync()
    {
        if (SelectWindow == null)
            return;

        var apiRsp = await NativeWindowHelper.MaximizeWindowAsync(SelectWindow.ProcessId, SelectWindow.Handle);
        apiRsp.HandleUI();
    }

    /// <inheritdoc cref="NormalWindowAsync"/>
    public ICommand NormalWindow_Click { get; }

    /// <summary>
    /// 恢复默认/正常窗口
    /// </summary>
    /// <returns></returns>
    async Task NormalWindowAsync()
    {
        if (SelectWindow == null)
            return;

        var apiRsp = await NativeWindowHelper.NormalWindowAsync(SelectWindow.ProcessId, SelectWindow.Handle);
        apiRsp.HandleUI();
    }

    /// <inheritdoc cref="KillProcessAsync"/>
    public ICommand WindowKill_Click { get; }

    /// <summary>
    /// 结束进程
    /// </summary>
    /// <returns></returns>
    async Task KillProcessAsync()
    {
        if (!EnabledWindowKill_Click)
            return;

        var apiRsp = await NativeWindowHelper.KillProcessAsync(SelectWindow!.ProcessId);
        apiRsp.HandleUI();
    }

    /// <inheritdoc cref="ShowWindowAsync"/>
    public ICommand ShowWindow_Click { get; }

    /// <summary>
    /// 显示窗口
    /// </summary>
    /// <returns></returns>
    async Task ShowWindowAsync()
    {
        if (SelectWindow == null)
            return;

        var apiRsp = await NativeWindowHelper.ShowWindowAsync(SelectWindow.ProcessId, SelectWindow.Handle);
        apiRsp.HandleUI();
    }

    /// <inheritdoc cref="HideWindowAsync"/>
    public ICommand HideWindow_Click { get; }

    /// <summary>
    /// 隐藏窗口
    /// </summary>
    /// <returns></returns>
    async Task HideWindowAsync()
    {
        if (SelectWindow == null)
            return;

        var apiRsp = await NativeWindowHelper.HideWindowAsync(SelectWindow.ProcessId, SelectWindow.Handle);
        apiRsp.HandleUI();
    }

    /// <inheritdoc cref="ToWallerpaperWindowAsync"/>
    public ICommand ToWallerpaperWindow_Click { get; }

    /// <summary>
    /// 窗口置于壁纸层
    /// </summary>
    /// <returns></returns>
    async Task ToWallerpaperWindowAsync()
    {
        if (SelectWindow == null)
            return;

        var apiRsp = await NativeWindowHelper.ToWallerpaperWindowAsync(SelectWindow.ProcessId, SelectWindow.Handle);
        apiRsp.HandleUI();
    }

    /// <inheritdoc cref="ResetWallerpaperAsync"/>
    public ICommand ResetWallerpaper_Click { get; }

    /// <summary>
    /// 重置壁纸层
    /// </summary>
    /// <returns></returns>
    async Task ResetWallerpaperAsync()
    {
        var apiRsp = await NativeWindowHelper.ResetWallerpaperAsync();
        apiRsp.HandleUI();
    }

    /// <inheritdoc cref="CopyGameInfoAsync"/>
    public ICommand CopyGameInfo_Click { get; }

    /// <summary>
    /// 复制游戏信息
    /// </summary>
    /// <returns></returns>
    async Task CopyGameInfoAsync()
    {
        var text = $"{Strings.GameRelated_Borderless_Title}: {SelectWindow!.Title}\n" +
                   $"{Strings.GameRelated_Borderless_Title}: {SelectWindow!.Title}\n" +
                   $"{Strings.GameRelated_Borderless_ClassName}: {SelectWindow!.Name}\n" +
                   $"{Strings.GameRelated_Borderless_Path}: {SelectWindow!.Path}";
        await Clipboard2.SetTextAsync(text);
        Toast.Show(ToastIcon.Success, Strings.CopyToClipboard);
    }
}

20250121 13:49:21 -文本内容: namespace Mobius.UI.ViewModels;

partial class BorderlessGamePageViewModel
{
    /// <inheritdoc cref="CrossMouseDownAsync"/>
    public ICommand Cross_MouseDown { get; }

    /// <summary>
    /// 十字架鼠标按下
    /// </summary>
    /// <returns></returns>
    async Task CrossMouseDownAsync()
    {
        await foreach (var apiRsp in GetMoveMouseDownWindowAsync())
        {
            if (apiRsp.HandleUIAllowNull(out var window) && window != null)
            {
                foreach (var item in WindowList.ToArray())
                {
                    if (item.Equals(window))
                    {
                        WindowList.Remove(item);
                    }
                }
                SelectWindow = window;
                WindowList.Insert(0, window);
            }
        }
    }

    /// <inheritdoc cref="BorderlessWindowAsync"/>
    public ICommand BorderlessWindow_Click { get; }

    /// <summary>
    /// 无边框窗口化
    /// </summary>
    /// <returns></returns>
    async Task BorderlessWindowAsync()
    {
        if (SelectWindow == null)
            return;

        var apiRsp = await NativeWindowHelper.BorderlessWindowAsync(SelectWindow.ProcessId, SelectWindow.Handle);
        apiRsp.HandleUI();
    }

    /// <inheritdoc cref="MaximizeWindowAsync"/>
    public ICommand MaximizeWindow_Click { get; }

    /// <summary>
    /// 最大化窗口
    /// </summary>
    /// <returns></returns>
    async Task MaximizeWindowAsync()
    {
        if (SelectWindow == null)
            return;

        var apiRsp = await NativeWindowHelper.MaximizeWindowAsync(SelectWindow.ProcessId, SelectWindow.Handle);
        apiRsp.HandleUI();
    }

    /// <inheritdoc cref="NormalWindowAsync"/>
    public ICommand NormalWindow_Click { get; }

    /// <summary>
    /// 恢复默认/正常窗口
    /// </summary>
    /// <returns></returns>
    async Task NormalWindowAsync()
    {
        if (SelectWindow == null)
            return;

        var apiRsp = await NativeWindowHelper.NormalWindowAsync(SelectWindow.ProcessId, SelectWindow.Handle);
        apiRsp.HandleUI();
    }

    /// <inheritdoc cref="KillProcessAsync"/>
    public ICommand WindowKill_Click { get; }

    /// <summary>
    /// 结束进程
    /// </summary>
    /// <returns></returns>
    async Task KillProcessAsync()
    {
        if (!EnabledWindowKill_Click)
            return;

        var apiRsp = await NativeWindowHelper.KillProcessAsync(SelectWindow!.ProcessId);
        apiRsp.HandleUI();
    }

    /// <inheritdoc cref="ShowWindowAsync"/>
    public ICommand ShowWindow_Click { get; }

    /// <summary>
    /// 显示窗口
    /// </summary>
    /// <returns></returns>
    async Task ShowWindowAsync()
    {
        if (SelectWindow == null)
            return;

        var apiRsp = await NativeWindowHelper.ShowWindowAsync(SelectWindow.ProcessId, SelectWindow.Handle);
        apiRsp.HandleUI();
    }

    /// <inheritdoc cref="HideWindowAsync"/>
    public ICommand HideWindow_Click { get; }

    /// <summary>
    /// 隐藏窗口
    /// </summary>
    /// <returns></returns>
    async Task HideWindowAsync()
    {
        if (SelectWindow == null)
            return;

        var apiRsp = await NativeWindowHelper.HideWindowAsync(SelectWindow.ProcessId, SelectWindow.Handle);
        apiRsp.HandleUI();
    }

    /// <inheritdoc cref="ToWallerpaperWindowAsync"/>
    public ICommand ToWallerpaperWindow_Click { get; }

    /// <summary>
    /// 窗口置于壁纸层
    /// </summary>
    /// <returns></returns>
    async Task ToWallerpaperWindowAsync()
    {
        if (SelectWindow == null)
            return;

        var apiRsp = await NativeWindowHelper.ToWallerpaperWindowAsync(SelectWindow.ProcessId, SelectWindow.Handle);
        apiRsp.HandleUI();
    }

    /// <inheritdoc cref="ResetWallerpaperAsync"/>
    public ICommand ResetWallerpaper_Click { get; }

    /// <summary>
    /// 重置壁纸层
    /// </summary>
    /// <returns></returns>
    async Task ResetWallerpaperAsync()
    {
        var apiRsp = await NativeWindowHelper.ResetWallerpaperAsync();
        apiRsp.HandleUI();
    }

    /// <inheritdoc cref="CopyGameInfoAsync"/>
    public ICommand CopyGameInfo_Click { get; }

    /// <summary>
    /// 复制游戏信息
    /// </summary>
    /// <returns></returns>
    async Task CopyGameInfoAsync()
    {
        var text = $"{Strings.GameRelated_Borderless_Title}: {SelectWindow!.Title}\n" +
                   $"{Strings.GameRelated_Borderless_Title}: {SelectWindow!.Title}\n" +
                   $"{Strings.GameRelated_Borderless_ClassName}: {SelectWindow!.Name}\n" +
                   $"{Strings.GameRelated_Borderless_Path}: {SelectWindow!.Path}";
        await Clipboard2.SetTextAsync(text);
        Toast.Show(ToastIcon.Success, Strings.CopyToClipboard);
    }
}

20250121 13:49:21 -文本内容: namespace Mobius.UI.ViewModels;

partial class BorderlessGamePageViewModel
{
    /// <inheritdoc cref="CrossMouseDownAsync"/>
    public ICommand Cross_MouseDown { get; }

    /// <summary>
    /// 十字架鼠标按下
    /// </summary>
    /// <returns></returns>
    async Task CrossMouseDownAsync()
    {
        await foreach (var apiRsp in GetMoveMouseDownWindowAsync())
        {
            if (apiRsp.HandleUIAllowNull(out var window) && window != null)
            {
                foreach (var item in WindowList.ToArray())
                {
                    if (item.Equals(window))
                    {
                        WindowList.Remove(item);
                    }
                }
                SelectWindow = window;
                WindowList.Insert(0, window);
            }
        }
    }

    /// <inheritdoc cref="BorderlessWindowAsync"/>
    public ICommand BorderlessWindow_Click { get; }

    /// <summary>
    /// 无边框窗口化
    /// </summary>
    /// <returns></returns>
    async Task BorderlessWindowAsync()
    {
        if (SelectWindow == null)
            return;

        var apiRsp = await NativeWindowHelper.BorderlessWindowAsync(SelectWindow.ProcessId, SelectWindow.Handle);
        apiRsp.HandleUI();
    }

    /// <inheritdoc cref="MaximizeWindowAsync"/>
    public ICommand MaximizeWindow_Click { get; }

    /// <summary>
    /// 最大化窗口
    /// </summary>
    /// <returns></returns>
    async Task MaximizeWindowAsync()
    {
        if (SelectWindow == null)
            return;

        var apiRsp = await NativeWindowHelper.MaximizeWindowAsync(SelectWindow.ProcessId, SelectWindow.Handle);
        apiRsp.HandleUI();
    }

    /// <inheritdoc cref="NormalWindowAsync"/>
    public ICommand NormalWindow_Click { get; }

    /// <summary>
    /// 恢复默认/正常窗口
    /// </summary>
    /// <returns></returns>
    async Task NormalWindowAsync()
    {
        if (SelectWindow == null)
            return;

        var apiRsp = await NativeWindowHelper.NormalWindowAsync(SelectWindow.ProcessId, SelectWindow.Handle);
        apiRsp.HandleUI();
    }

    /// <inheritdoc cref="KillProcessAsync"/>
    public ICommand WindowKill_Click { get; }

    /// <summary>
    /// 结束进程
    /// </summary>
    /// <returns></returns>
    async Task KillProcessAsync()
    {
        if (!EnabledWindowKill_Click)
            return;

        var apiRsp = await NativeWindowHelper.KillProcessAsync(SelectWindow!.ProcessId);
        apiRsp.HandleUI();
    }

    /// <inheritdoc cref="ShowWindowAsync"/>
    public ICommand ShowWindow_Click { get; }

    /// <summary>
    /// 显示窗口
    /// </summary>
    /// <returns></returns>
    async Task ShowWindowAsync()
    {
        if (SelectWindow == null)
            return;

        var apiRsp = await NativeWindowHelper.ShowWindowAsync(SelectWindow.ProcessId, SelectWindow.Handle);
        apiRsp.HandleUI();
    }

    /// <inheritdoc cref="HideWindowAsync"/>
    public ICommand HideWindow_Click { get; }

    /// <summary>
    /// 隐藏窗口
    /// </summary>
    /// <returns></returns>
    async Task HideWindowAsync()
    {
        if (SelectWindow == null)
            return;

        var apiRsp = await NativeWindowHelper.HideWindowAsync(SelectWindow.ProcessId, SelectWindow.Handle);
        apiRsp.HandleUI();
    }

    /// <inheritdoc cref="ToWallerpaperWindowAsync"/>
    public ICommand ToWallerpaperWindow_Click { get; }

    /// <summary>
    /// 窗口置于壁纸层
    /// </summary>
    /// <returns></returns>
    async Task ToWallerpaperWindowAsync()
    {
        if (SelectWindow == null)
            return;

        var apiRsp = await NativeWindowHelper.ToWallerpaperWindowAsync(SelectWindow.ProcessId, SelectWindow.Handle);
        apiRsp.HandleUI();
    }

    /// <inheritdoc cref="ResetWallerpaperAsync"/>
    public ICommand ResetWallerpaper_Click { get; }

    /// <summary>
    /// 重置壁纸层
    /// </summary>
    /// <returns></returns>
    async Task ResetWallerpaperAsync()
    {
        var apiRsp = await NativeWindowHelper.ResetWallerpaperAsync();
        apiRsp.HandleUI();
    }

    /// <inheritdoc cref="CopyGameInfoAsync"/>
    public ICommand CopyGameInfo_Click { get; }

    /// <summary>
    /// 复制游戏信息
    /// </summary>
    /// <returns></returns>
    async Task CopyGameInfoAsync()
    {
        var text = $"{Strings.GameRelated_Borderless_Title}: {SelectWindow!.Title}\n" +
                   $"{Strings.GameRelated_Borderless_Title}: {SelectWindow!.Title}\n" +
                   $"{Strings.GameRelated_Borderless_ClassName}: {SelectWindow!.Name}\n" +
                   $"{Strings.GameRelated_Borderless_Path}: {SelectWindow!.Path}";
        await Clipboard2.SetTextAsync(text);
        Toast.Show(ToastIcon.Success, Strings.CopyToClipboard);
    }
}

20250121 13:49:21 -文本内容: namespace Mobius.UI.ViewModels;

partial class BorderlessGamePageViewModel
{
    /// <inheritdoc cref="CrossMouseDownAsync"/>
    public ICommand Cross_MouseDown { get; }

    /// <summary>
    /// 十字架鼠标按下
    /// </summary>
    /// <returns></returns>
    async Task CrossMouseDownAsync()
    {
        await foreach (var apiRsp in GetMoveMouseDownWindowAsync())
        {
            if (apiRsp.HandleUIAllowNull(out var window) && window != null)
            {
                foreach (var item in WindowList.ToArray())
                {
                    if (item.Equals(window))
                    {
                        WindowList.Remove(item);
                    }
                }
                SelectWindow = window;
                WindowList.Insert(0, window);
            }
        }
    }

    /// <inheritdoc cref="BorderlessWindowAsync"/>
    public ICommand BorderlessWindow_Click { get; }

    /// <summary>
    /// 无边框窗口化
    /// </summary>
    /// <returns></returns>
    async Task BorderlessWindowAsync()
    {
        if (SelectWindow == null)
            return;

        var apiRsp = await NativeWindowHelper.BorderlessWindowAsync(SelectWindow.ProcessId, SelectWindow.Handle);
        apiRsp.HandleUI();
    }

    /// <inheritdoc cref="MaximizeWindowAsync"/>
    public ICommand MaximizeWindow_Click { get; }

    /// <summary>
    /// 最大化窗口
    /// </summary>
    /// <returns></returns>
    async Task MaximizeWindowAsync()
    {
        if (SelectWindow == null)
            return;

        var apiRsp = await NativeWindowHelper.MaximizeWindowAsync(SelectWindow.ProcessId, SelectWindow.Handle);
        apiRsp.HandleUI();
    }

    /// <inheritdoc cref="NormalWindowAsync"/>
    public ICommand NormalWindow_Click { get; }

    /// <summary>
    /// 恢复默认/正常窗口
    /// </summary>
    /// <returns></returns>
    async Task NormalWindowAsync()
    {
        if (SelectWindow == null)
            return;

        var apiRsp = await NativeWindowHelper.NormalWindowAsync(SelectWindow.ProcessId, SelectWindow.Handle);
        apiRsp.HandleUI();
    }

    /// <inheritdoc cref="KillProcessAsync"/>
    public ICommand WindowKill_Click { get; }

    /// <summary>
    /// 结束进程
    /// </summary>
    /// <returns></returns>
    async Task KillProcessAsync()
    {
        if (!EnabledWindowKill_Click)
            return;

        var apiRsp = await NativeWindowHelper.KillProcessAsync(SelectWindow!.ProcessId);
        apiRsp.HandleUI();
    }

    /// <inheritdoc cref="ShowWindowAsync"/>
    public ICommand ShowWindow_Click { get; }

    /// <summary>
    /// 显示窗口
    /// </summary>
    /// <returns></returns>
    async Task ShowWindowAsync()
    {
        if (SelectWindow == null)
            return;

        var apiRsp = await NativeWindowHelper.ShowWindowAsync(SelectWindow.ProcessId, SelectWindow.Handle);
        apiRsp.HandleUI();
    }

    /// <inheritdoc cref="HideWindowAsync"/>
    public ICommand HideWindow_Click { get; }

    /// <summary>
    /// 隐藏窗口
    /// </summary>
    /// <returns></returns>
    async Task HideWindowAsync()
    {
        if (SelectWindow == null)
            return;

        var apiRsp = await NativeWindowHelper.HideWindowAsync(SelectWindow.ProcessId, SelectWindow.Handle);
        apiRsp.HandleUI();
    }

    /// <inheritdoc cref="ToWallerpaperWindowAsync"/>
    public ICommand ToWallerpaperWindow_Click { get; }

    /// <summary>
    /// 窗口置于壁纸层
    /// </summary>
    /// <returns></returns>
    async Task ToWallerpaperWindowAsync()
    {
        if (SelectWindow == null)
            return;

        var apiRsp = await NativeWindowHelper.ToWallerpaperWindowAsync(SelectWindow.ProcessId, SelectWindow.Handle);
        apiRsp.HandleUI();
    }

    /// <inheritdoc cref="ResetWallerpaperAsync"/>
    public ICommand ResetWallerpaper_Click { get; }

    /// <summary>
    /// 重置壁纸层
    /// </summary>
    /// <returns></returns>
    async Task ResetWallerpaperAsync()
    {
        var apiRsp = await NativeWindowHelper.ResetWallerpaperAsync();
        apiRsp.HandleUI();
    }

    /// <inheritdoc cref="CopyGameInfoAsync"/>
    public ICommand CopyGameInfo_Click { get; }

    /// <summary>
    /// 复制游戏信息
    /// </summary>
    /// <returns></returns>
    async Task CopyGameInfoAsync()
    {
        var text = $"{Strings.GameRelated_Borderless_Title}: {SelectWindow!.Title}\n" +
                   $"{Strings.GameRelated_Borderless_Title}: {SelectWindow!.Title}\n" +
                   $"{Strings.GameRelated_Borderless_ClassName}: {SelectWindow!.Name}\n" +
                   $"{Strings.GameRelated_Borderless_Path}: {SelectWindow!.Path}";
        await Clipboard2.SetTextAsync(text);
        Toast.Show(ToastIcon.Success, Strings.CopyToClipboard);
    }
}

